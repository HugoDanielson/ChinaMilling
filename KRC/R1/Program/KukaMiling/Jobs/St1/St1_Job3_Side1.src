&ACCESS RVO
&REL 3
DEF  St1_Job3_Side1 (lnActSt :IN)
   INT lnActSt,lnUsedBase,lnUsedTool
   INT lnJobNr
   
   ;FOLD INIT
      CONTINUE
      IF ($T1 OR $T2)THEN
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
         INTERRUPT ON 3
         BAS (#INITMOV,0)
         lnActSt = 1
         PTP $POS_ACT
      ENDIF
      lnJobNr = gnJobNr3
      lnUsedBase = lnActSt + 10
      lnUsedTool = 20 
      
      gfMillingOffset = $NULLFRAME
      gfMillingOffset.Z = -(grCuttingDepth*(gnMillingCounter-1))
      
      BASE_DATA[lnUsedBase] = BASE_DATA[lnActSt]:gfBaseShift[lnActSt]:gfMillingOffset
      TOOL_DATA[lnUsedTool] = TOOL_DATA[11] :{X 0,Y 0,Z 0,A 0,B 0,C 0}
   ;ENDFOLD
   REPEAT
      CONTINUE
   UNTIL (DI_SpindleStandsStill) OR NOT WatchDog(gnTimerWatchDog, 30000)
   
   CONTINUE
   IF NOT (DI_SpindleStandsStill) THEN
      MsgNotify("Station1/St1_Job3_Side1() -> TimeOut: Spindle speed Not StandStill")
      SpindleStop()
      gbRecoveryNeeded = TRUE
      RETURN
   ENDIF
   
   gbJob3StartedSt[1] = TRUE
   gbJob3DoneSt[1]    = FALSE
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 500)   
   PTP lfPrePos[1] C_DIS 
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfPrePos[2] C_DIS
   
   ;Measure P1
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[1] 
   MoveSettings(lnUsedBase, lnUsedTool, 100, 2)   
   LIN lfWorkPos[1]:{X 0.0,Y 0.0,Z -4,A 0.0,B 0.0,C 0.0}
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[1] C_DIS 
   ;Measure P2
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[2] 
   MoveSettings(lnUsedBase, lnUsedTool, 100, 2)   
   LIN lfWorkPos[2]:{X 0.0,Y 0.0,Z -4,A 0.0,B 0.0,C 0.0}
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[2] C_DIS
   ;Measure P3
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[3] 
   MoveSettings(lnUsedBase, lnUsedTool, 100, 2)   
   LIN lfWorkPos[3]:{X 0.0,Y 0.0,Z -4,A 0.0,B 0.0,C 0.0}
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[3] C_DIS
   ;END OF MEASUREMENT 
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200) 
   TRIGGER WHEN DISTANCE=0 DELAY=0 DO endOfJob() PRIO=-1    
   LIN lfPrePos[2] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)  
   
   PTP lfPrePos[1] C_PTP 
   MoveToPrepos(lnActSt)
END

DEF endOfJob()
   gbJob3StartedSt[1] = FALSE
   gbJob3DoneSt[1]    = TRUE
END