&ACCESS RVEO
&REL 33
&PARAM DISKPATH = KRC:\R1\Program\KukaMiling\Jobs\St2
DEF  st2_job1_copy (lnActSt :IN,lnUseMillingTool :IN)
   INT lnActSt,lnUsedBase,lnUsedTool
   INT lnUseMillingTool
   BOOL nbOK,lbTimeOut
   
   CONTINUE
   IF ($T1 OR $T2)THEN
      GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
      INTERRUPT ON 3
      BAS (#INITMOV,0)
      lnActSt = 2
      PTP $POS_ACT
   ENDIF
   lnUsedBase = lnActSt +10
   lnUsedTool = 20
   
   calculatepickpos(lnUseMillingTool)
   
   BASE_DATA[lnUsedBase] = BASE_DATA[lnActSt]:gfBaseShift[lnActSt]
   TOOL_DATA[lnUsedTool] = TOOL_DATA[10] :{X 0,Y 0,Z 0,A 0,B 0,C 0}
   
   gbJob1StartedSt[2] = TRUE
   gbJob1DoneSt[2]    = FALSE
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 300) 
   TRIGGER WHEN DISTANCE=0 DELAY=0 DO SpindleInit()      PRIO=-1   
   PTP lfPrePos[1] C_PTP
   
   ;; WAIT FOR DI_SpindleStandsStill
   REPEAT   
      CONTINUE      
   UNTIL  DI_SpindleStandsStill
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfWorkPos[1] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200) 
   TRIGGER WHEN DISTANCE=0 DELAY=0 DO SpindleRelease() PRIO=-1
   LIN lfWorkPos[2] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 10) 
   TRIGGER WHEN DISTANCE=1 DELAY=0 DO  SpindleClampWithTool() PRIO=-1   
   LIN lfWorkPos[3] 
   
   ResetWatchDog(lnUsedBase)
   
   REPEAT    
   UNTIL NOT (DI_ToolPresent AND DI_ToolClamped ) OR NOT WatchDog(gnTimerWatchDog, 5000)
   
   CONTINUE
   IF NOT (DI_ToolPresent AND DI_ToolClamped) THEN
      SpindleRelease()
      ResetWatchDog(lnUsedBase)
      REPEAT    
         CONTINUE
      UNTIL NOT (DI_ToolPresent AND DI_ToolClamped ) OR NOT WatchDog(gnTimerWatchDog, 5000)
      IF (DI_ToolPresent OR DI_ToolClamped) THEN
         MsgQuit("Station2/St2_Job1/ - Tool Can not be release", "Station2/St2_Job1")
         LOOP
            HALT
         ENDLOOP  
      ENDIF
      MoveSettings(lnUsedBase, lnUsedTool, 100, 10)
      TRIGGER WHEN DISTANCE=1 DELAY=0 DO SpindleClamp()  PRIO=-1      
      LIN_REL{Z  100} #BASE
      gbRecoveryNeeded = TRUE
      
      RETURN
   ENDIF
   
   gnLastToolNr = lnUseMillingTool;
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 50)   
   LIN lfWorkPos[4] C_DIS
   
   CONTINUE
   IF (gnLastToolNr == 2) OR (gnLastToolNr == 3) THEN
      ;; CALCULATE REQUIERED RPM BASE ON USED USED MILLING TOOL
      grUsedRPM = GetMillingRPM(grTool_VC[gnLastToolNr], grTool_Diameter[gnLastToolNr])
      ;; SPINDLE INIT MOVED TO INIT BEFORE STARTUP
      ;;TRIGGER WHEN DISTANCE=0 DELAY=0 DO SpindleInit()         PRIO=-1
      TRIGGER WHEN DISTANCE=0 DELAY=0 DO SpindleRun(grUsedRPM) PRIO=-1
   ENDIF
   MoveSettings(lnUsedBase, lnUsedTool, 100, 500)   
   LIN lfWorkPos[5] C_DIS
   
   TRIGGER WHEN DISTANCE=1 DELAY=0 DO endOfJob() PRIO=-1   
   MoveToPrepos(lnActSt)
END

DEF endOfJob()
   
   gbJob1StartedSt[2] = FALSE
   gbJob1DoneSt[2]    = TRUE
END

DEF calculatePickPos(lnLastTool :IN)
   INT lnLastTool,lnCounter
   
   lfPrePos[1].Y = (lnLastTool*grToolHolderDist) - grToolHolderDist
   
   FOR lnCounter = 1 TO 5 STEP 1
      lfWorkPos[lnCounter].Y =  (lnLastTool*grToolHolderDist) - grToolHolderDist
   ENDFOR
   
END