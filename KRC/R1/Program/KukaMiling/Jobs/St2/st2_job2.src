&ACCESS RVEO
&REL 18
&PARAM DISKPATH = KRC:\R1\Program\KukaMiling\Jobs\St2
DEF  St2_Job2 (lnActSt :IN,lnReturnMillingTool :IN)
   INT lnActSt,lnUsedBase,lnUsedTool
   INT lnReturnMillingTool
   BOOL nbOK,lbTimeOut
   
   ;FOLD INIT
      CONTINUE
      IF ($T1 OR $T2)THEN
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
         INTERRUPT ON 3
         BAS (#INITMOV,0)
         lnActSt = 2
         PTP $POS_ACT
      ENDIF
      lnUsedBase = lnActSt +10
      lnUsedTool = 20
      
      BASE_DATA[lnUsedBase] = BASE_DATA[lnActSt]:gfBaseShift[lnActSt]
      TOOL_DATA[lnUsedTool] = TOOL_DATA[10] :{X 0,Y 0,Z 0,A 0,B 0,C 0}
   ;ENDFOLD
   calculatePlacePos(lnReturnMillingTool)
   
   gbJob2StartedSt[2] = TRUE
   gbJob2DoneSt[2]    = FALSE
   MoveSettings(lnUsedBase, lnUsedTool, 100, 500)   
   PTP lfPrePos[1] C_PTP
   
   
  ;; WAIT FOR DI_SpindleStandsStill
   
   REPEAT   
      CONTINUE      
   UNTIL DI_SpindleStandsStill
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 250)   
   LIN lfWorkPos[1] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 50)
   LIN lfWorkPos[2] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 20)   
   LIN lfWorkPos[3] 
   SpindleRelease()
   
   ResetWatchDog(lnUsedBase);
   
   REPEAT    
      CONTINUE
   UNTIL (DI_ToolPresent OR DI_ToolClamped ) OR NOT WatchDog(gnTimerWatchDog, 5000)
   
   CONTINUE
   IF (DI_ToolPresent OR  DI_ToolClamped) THEN
      SpindleClampWithTool()
      gbRecoveryNeeded = TRUE
      RETURN
   ENDIF
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 50) 
   TRIGGER WHEN DISTANCE=1 DELAY=0 DO SpindleClamp()  PRIO=-1
   LIN lfWorkPos[4] C_DIS
   MoveSettings(lnUsedBase, lnUsedTool, 100, 250)   
   LIN lfWorkPos[5] C_DIS
   
   gnLastToolNr = 0
   
   TRIGGER WHEN DISTANCE=1 DELAY=0 DO endOfJob() PRIO=-1   
   MoveToPrepos(lnActSt)
END

DEF endOfJob()
   
   gbJob2StartedSt[2] = FALSE
   gbJob2DoneSt[2]    = TRUE
END

DEF calculatePlacePos(lnReturnTool :IN)
   INT lnReturnTool,lnCounter
   
   IF NOT ((lnReturnTool>0) AND (lnReturnTool <= 3)) THEN
      HALT
   ENDIF
   lfPrePos[1].Y = (lnReturnTool*grToolHolderDist) - grToolHolderDist
   
   FOR lnCounter = 1 TO 5 STEP 1
      lfWorkPos[lnCounter].Y =  (lnReturnTool*grToolHolderDist) - grToolHolderDist
   ENDFOR
   
END