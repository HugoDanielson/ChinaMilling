&ACCESS RVO
&REL 6
DEF  LShapeMillingFar (lnActSt :IN)
   INT lnActSt,lnUsedBase,lnUsedTool,lnBaseNr
   INT lnJobNr, lncounter, lncounter2
   REAL lrZCut
   
   ;FOLD INIT
      CONTINUE
      ;IF ($T1 OR $T2)THEN
      GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
      INTERRUPT ON 3
      BAS (#INITMOV,0)
      lnActSt = 2
      PTP $POS_ACT
      ;ENDIF
      
      PTP XHOME
      
      ;Loop Counters
      lncounter = 0
      lncounter2 = 0
      
      ; Used Base and tool
      lnUsedBase = 11
      lnUsedTool = 11
      
      gnLastToolNr = 4
      lnBaseNr = 6
      
      ;Depth of Cut
      lrZCut = 0.0
      
      gfMillingOffset = $NULLFRAME
      ;gfMillingOffset.Z = -(grCuttingDepth*(gnMillingCounter-1))
      
      BASE_DATA[lnUsedBase] = BASE_DATA[lnBaseNr]:gfBaseShift[lnBaseNr];:gfMillingOffset
      BASE_DATA[lnUsedBase].Z=BASE_DATA[lnUsedBase].Z - lrZCut
      
      TOOL_DATA[lnUsedTool] = TOOL_DATA[gnLastToolNr] :{X 0,Y 0,Z 0,A 0,B 0,C 0}
      LOAD_DATA[lnUsedTool] = LOAD_DATA[gnLastToolNr]
      
      grUsedRPM = GetMillingRPM(grTool_VC[gnLastToolNr], grTool_Diameter[gnLastToolNr])
      grUsedMillingSpeed = GetMillingSpeed(grUsedRPM, grTool_ToothCount[gnLastToolNr], grTool_FeedPerTooth[gnLastToolNr])
   ;ENDFOLD
   ;MoveSettings (nBase: IN, nTool: IN, nAcc: IN, nVel : IN )
   
   SpindleRun(grUsedRPM,#CLOCKWISE)
   WAIT SEC 5
   
   ;WAIT FOR  gIActSpeed > grUsedMillingSpeed-100
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 500)   
   PTP lfPrePos[1] C_PTP 
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 200)   
   LIN lfPrePos[2] C_DIS
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, grUsedMillingSpeed)  
   
   FOR lncounter2 = 1 TO 2 
      FOR lncounter = 1 TO 11
         
         LIN lfWorkPos[lncounter] C_VEL
         
      ENDFOR
      lncounter = 1
      
   ENDFOR
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 20)
   
   WAIT SEC 0
   
   SpindleStop( )
   LIN lfWorkPos[11]
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, 2000)
   
   PTP XHOME
   
  
   
END

DEF endOfJob()
   gbJob1StartedSt[1] = FALSE
   gbJob1DoneSt[1]    = TRUE
   gnMillingCounter = gnMillingCounter+1
END