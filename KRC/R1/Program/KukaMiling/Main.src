&ACCESS RVO
&REL 3
DEF Main ( )
   ;;===============================================================
   ;;              MAIN MILLING PROGRAM
   ;;
   ;; ST1  -> Milling Station
   ;; ST2  -> ToolChanger
   ;; ST3  -> TCP calibration STation
   ;; ST20 -> Home Station
   ;; 
   ;;
   ;;
   ;;
   ;; Date -> 092020
   ;; Rev  -> 001
   ;; Aut  -> Bid,HuD
   ;;===============================================================
   GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ()
   INTERRUPT ON 3
   
   ;; Operational Stop -> RedButton
   $CYCFLAG[gCyStopRobot] = IN_StopRobot OR  biStopRobot
   GLOBAL INTERRUPT DECL gnIntStopRobot WHEN $CYCFLAG[gCyStopRobot] DO IpProgramStop()
   
   ResetIO()
   ResetVars()
   InitBeforeStartup()
   
   IF NOT $IN_HOME THEN
      ;; StartPos ( ) 
      ;; JUST FOR NOW REMOVE AFTER SHOW
      gbRecoveryNeeded = FALSE
      Home()
   ENDIF
   
   BAS (#INITMOV,0)
   PTP $POS_ACT
   
   InitVariables()
   
   LOOP
      SWITCH getStation()
         CASE gnSt1
            Station1(gnSt1)
         CASE gnSt2
            Station2(gnSt2)
         CASE gnSt3
            Station3(gnSt3)
         CASE gnSt20
            Station20(gnSt20)
      ENDSWITCH
      
      getCycle()
   ENDLOOP
   
END

DEFFCT INT getStation()  
   BOOL lbOK,lbToolClamped
   INT lnCounter
   ;;===============================================================
   ;;                    Target Station 
   ;;===============================================================
   ;FOLD getStation
   CONTINUE
   lbToolClamped        = (DI_ToolPresent AND DI_ToolClamped)
   
   lbOK =               TRUE
   lbOK = lbOK AND      gbCalibrationRequest 
   lbOK = lbOK OR       gbMillingRequest
   lbOK = lbOK OR       gbMillingMeasRequest 
   lbOK = lbOK AND      gbProbeCalibrated
   lbOK = lbOK AND      lbToolClamped
   lbOK = lbOK AND NOT  gbToolChangeRequest
   lbOK = lbOK AND NOT  gbAlarmSt[1]
   lbOK = lbOK AND      biStartProgram
   lbOK = lbOK AND NOT  biStopInHome
   IF lbOK THEN
      RETURN gnSt1
   ENDIF
   
   lbOK =               TRUE
   lbOK = lbOK AND      gbCalibrationRequest 
   lbOK = lbOK OR       gbMillingRequest
   lbOK = lbOK OR       gbMillingMeasRequest
   lbOK = lbOK AND NOT  lbToolClamped 
   lbOK = lbOK OR       gbToolChangeRequest
   lbOK = lbOK AND NOT  gbAlarmSt[2]
   lbOK = lbOK AND      biStartProgram
   lbOK = lbOK AND NOT  biStopInHome
   IF lbOK THEN
      RETURN gnSt2
   ENDIF  
   
   lbOK =               lbToolClamped 
   lbOK = lbOK AND      biButtonReturnTool
   lbOK = lbOK AND NOT  gbAlarmSt[2]   
   lbOK = lbOK AND      biStartProgram
   lbOK = lbOK AND NOT  biStopInHome
   IF lbOK THEN 
      biButtonReturnTool = FALSE
      RETURN gnSt2
   ENDIF
   
   lbOK =               lbToolClamped
   lbOK = lbOK AND      gbJob1DoneSt[1] 
   lbOK = lbOK AND      gbJob2DoneSt[1]
   lbOK = lbOK AND      gbJob3DoneSt[1]
   lbOK = lbOK AND      biStartProgram
   lbOK = lbOK AND NOT biStopInHome
   IF lbOK THEN 
      RETURN gnSt2
   ENDIF
   
   lbOK =              lbToolClamped
   lbOK = lbOK AND     gbCalibrationRequest
   lbOK = lbOK AND NOT biTool_InHolder_1
   lbOK = lbOK AND NOT gbProbeCalibrated
   lbOK = lbOK AND NOT gbAlarmSt[3]
   lbOK = lbOK AND     biStartProgram
   lbOK = lbOK AND NOT biStopInHome
   IF lbOK THEN
      RETURN gnSt3
   ENDIF
   
   lbOK =   TRUE
   lbOK = lbOK AND NOT gbCalibrationRequest 
   lbOK = lbOK AND NOT gbMillingRequest
   lbOK = lbOK AND NOT gbMillingMeasRequest
   lbOK = lbOK AND NOT lbToolClamped
   lbOK = lbOK OR      biStopInHome
   IF lbOK THEN
      RETURN gnSt20
   ELSE
      RETURN gnNoSt
   ENDIF
   ;ENDFOLD
ENDFCT

DEF getCycle()
   ;;===============================================================
   ;;           PROGRAM Cycle - CalTCP/CalBase/Mill/Measure
   ;;===============================================================
   BOOL lbOK
   IF NOT gbJob1DoneSt[1] AND NOT gbJob2DoneSt[1] AND NOT gbJob3DoneSt[1]  THEN
      gbCalibrationRequest = TRUE
      IF (gnLastToolNr <> 1) THEN
         gbToolChangeRequest = TRUE
      ELSE
         gbToolChangeRequest = FALSE
      ENDIF
      RETURN
   ENDIF
   
   IF gbJob1DoneSt[1] AND NOT gbJob2DoneSt[1] AND NOT gbJob3DoneSt[1] THEN
      gbCalibrationRequest = FALSE
      gbMillingRequest     = TRUE
      IF (gnLastToolNr == 1) THEN
         gbToolChangeRequest = TRUE
      ELSE
         gbToolChangeRequest = FALSE
      ENDIF
      RETURN
   ENDIF
   
   IF gbJob1DoneSt[1] AND gbJob2DoneSt[1] AND NOT gbJob3DoneSt[1] THEN
      gbCalibrationRequest = FALSE
      gbMillingRequest     = FALSE
      IF (gnLastToolNr <> 1) THEN
         gbToolChangeRequest = TRUE
      ELSE
         gbToolChangeRequest = FALSE
      ENDIF
      gbMillingMeasRequest = TRUE
      RETURN
   ENDIF
   
   IF gbJob1DoneSt[1] AND gbJob2DoneSt[1] AND gbJob3DoneSt[1] THEN
      gbMillingMeasRequest = FALSE
   ENDIF
   
   lbOK =          gbJob1DoneSt[1]
   lbOK = lbOK AND gbJob2DoneSt[1]
   lbOK = lbOK AND gbJob3DoneSt[1] 
   lbOK = lbOK AND NOT DI_ToolPresent 
   lbOK = lbOK AND NOT DI_ToolClamped 
   lbOK = lbOK AND NOT gbCalibrationRequest
   lbOK = lbOK AND NOT gbMillingRequest
   lbOK = lbOK AND NOT gbMillingMeasRequest
   
   IF lbOK THEN   
      gbCycleDone    = FALSE
      biStartProgram = FALSE
      
      ;IF TRUE THEN
      ;gbCalibrationRequest = FALSE
      ;gbMillingRequest     = FALSE
      ;gbMillingMeasRequest = FALSE
      ;
      ;gbJob1DoneSt[1] = FALSE
      ;gbJob2DoneSt[1] = FALSE
      ;gbJob3DoneSt[1] = FALSE  
      ;RETURN
      ;ENDIF
      gbJob1DoneSt[1] = FALSE
      gbJob2DoneSt[1] = FALSE
      gbJob3DoneSt[1] = FALSE  
      
   ENDIF
END

DEF InitBeforeStartup()
   ;;===============================================================
   ;;            INITIALISATION BEFOR MAIN LOOP START 
   ;;===============================================================
   INT lnCounter
   DECL STATE_T STATE
   DECL MODUS_T MODE
   $ADVANCE = 3
   $PHGBRIGHT = 15
   $PHGCONT   =  9
   
   INTERRUPT ON gnIntStopRobot  
   
   ;FOLD .  Switch on Submit Interpreter
      IF ($PRO_STATE0 <> #P_ACTIVE) THEN
         CWRITE($CMD,STATE,MODE,"RUN /R1/SPS()")
      ENDIF
      WAIT FOR ($PRO_STATE0 == #P_ACTIVE)
   ;ENDFOLD Switch on Submit Interpreter
   
   OUT_LightBuzz = TRUE
   WAIT SEC 0.3
   OUT_LightBuzz = FALSE
   
   ;INIT SPINDLE -> Enable/Air/Chiller/
   SpindleInit()
   
END

;;===============================================================
;;                    PROGRAM STOP
;;===============================================================

DEF IpProgramStop()
   
   BRAKE
   ;; Wait until operational stop is acknowledged:
   Spindle_enable(#blocked)
   WAIT FOR NOT IN_StopRobot AND NOT biStopRobot
   Spindle_enable(#allowed)
   
END
