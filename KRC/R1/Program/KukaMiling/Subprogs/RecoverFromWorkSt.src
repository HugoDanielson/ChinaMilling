&ACCESS RVO
&REL 13
&PARAM EDITMASK = *
DEFFCT BOOL RecoverFromWorkSt(lnActSt : IN,lnUsedBase :IN,lnUsedTool :IN)
   INT lnActSt,lnCounter,lnUsedTool,lnUsedBase
   BOOL nbOK
   
   ;FOLD VARSTATE (IF $T1 OR $T2):
      CONTINUE
      IF NOT (VARSTATE("lnUsedBase") == #INITIALIZED) THEN
         lnUsedBase = lnActSt +10  
      ENDIF
      CONTINUE
      IF NOT (VARSTATE("lnUsedTool") == #INITIALIZED) THEN
         lnUsedTool = 1
      ENDIF
   ;ENDFOLD VARSTATE (IF $T1 OR $T2):
   
   SWITCH lnActSt
      CASE gnSt1
         IF gbJob1StartedSt[lnActSt] AND NOT gbJob1DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob2StartedSt[lnActSt] AND NOT gbJob2DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob3StartedSt[lnActSt] AND NOT gbJob3DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         
          MoveToPrepos(1)      
      CASE gnSt2
         IF gbJob1StartedSt[lnActSt] AND NOT gbJob1DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 50)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob2StartedSt[lnActSt] AND NOT gbJob2DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob3StartedSt[lnActSt] AND NOT gbJob3DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         
          MoveToPrepos(2)
      CASE gnSt3
         IF gbJob1StartedSt[lnActSt] AND NOT gbJob1DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob2StartedSt[lnActSt] AND NOT gbJob2DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
         IF gbJob3StartedSt[lnActSt] AND NOT gbJob3DoneSt[lnActSt]THEN 
            WAIT SEC 0    
            MoveSettings(lnUsedBase, lnUsedTool, 50, 1)
            LIN_REL{Z  100}
            WAIT SEC 0
            gbJob1StartedSt[lnActSt] = FALSE
            nbOK = TRUE
         ENDIF
      MoveToPrepos(3)
         
      DEFAULT
   ENDSWITCH
   
   FOR lnCounter = 1 TO 3
      nbOK = NOT gbJob1StartedSt[lnCounter]   
      nbOK = nbOK AND NOT gbJob2StartedSt[lnCounter] 
   ENDFOR
   
   IF nbOK THEN
      gbRecoveryNeeded = FALSE
   ENDIF
   
   ;Move Home After Recovery
   MoveTo(lnActSt, gnSt20)
   WAIT SEC 0
   RETURN nbOK
ENDFCT