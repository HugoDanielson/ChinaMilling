&ACCESS RVO
&REL 7
&PARAM DISKPATH = KRC:\R1\Program\Milling
DEF TopSquare ( )
   INT lnActSt,lnUsedBase,lnUsedTool,lnBaseNr
   INT lnJobNr, lnCounter,lnCounter2
   FRAME lfZcut
   FRAME lfToolDiamShift
   FRAME lfStartMillingPos
   FRAME lfBaseShift
   FRAME lfBaseCycleZ
   FRAME lfBaseCycleShift
   FRAME lfCircAuxPoint1
   FRAME lfCircEndPoint1
   
   CONTINUE     
   ;IF ($T1 OR $T2)THEN
   GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
   INTERRUPT ON 3
   BAS (#INITMOV,0)
   lnActSt = 1
   PTP $POS_ACT
   PTP lAstartPos
   
   gbRobControlActive = FALSE
   
   ; Used Base and tool
   lnUsedBase = 11
   lnUsedTool = 11
   
   gnLastToolNr = 4
   lnBaseNr = 24
   
   gfMillingOffset = $NULLFRAME
   
   lfZcut = $NULLFRAME
   lfZcut.Z = 0
   
   lfBaseShift = {X 18,Y 16, Z -3,A 0,B 0,C 0}
   lfBaseShift.x = lfBaseShift.x - grTool_Diameter[gnLastToolNr]/2
   lfBaseShift.y = lfBaseShift.y - grTool_Diameter[gnLastToolNr]/2
   
   
   ;lfBaseShift = {X 50,Y 48.5,Z -3,A 0,B 0,C 0}   
   lfBaseCycleZ = $NULLFRAME
   lfBaseCycleZ.Z = 0
   
   
   ;*************************************************************
   ;*                SPINDLE START + CUT PARAMS                 *
   ;*************************************************************
   grUsedRPM = GetMillingRPM(grTool_VC[gnLastToolNr], grTool_Diameter[gnLastToolNr])
   grUsedMillingSpeed = GetMillingSpeed(grUsedRPM, grTool_ToothCount[gnLastToolNr], grTool_FeedPerTooth[gnLastToolNr])
   
   SpindleRun(TRUE,grUsedRPM,#CLOCKWISE)
   
   lfBaseCycleZ = $NULLFRAME
   lfBaseCycleZ.Z = 0
   BASE_DATA[lnUsedBase] = BASE_DATA[lnBaseNr] : lfBaseShift : lfBaseCycleZ
   TOOL_DATA[lnUsedTool] = TOOL_DATA[gnLastToolNr] :{X 0,Y 0,Z 0,A 270,B 0,C 0}
   
   MoveSettings(lnUsedBase, lnUsedTool, 100, grUsedMillingSpeed)
   
   ;*************************************************************
   ;*                Main Material Removal PASS                 *
   ;*************************************************************
   LIN {X -50, Y -50, Z 0,A 0, B 0, C 0}
   MillSquarePass(100,50,grTool_Diameter[gnLastToolNr])
   
   ;LIN getCircFrame(-270,39,100,0,lfWorkPos[1]):{X 0,Y 0,Z 5,A 0,B 0,C 0 }
   ;
   ;FOR lnCounter = 0 TO 100
      ;LIN getCircFrame(-270,39,100,lnCounter,lfWorkPos[1]) C_VEL
   ;ENDFOR
   ;
   TRIGGER WHEN DISTANCE=1 DELAY=0 DO  SpindleRun(FALSE,0,#CLOCKWISE) PRIO=-1 
   MoveSettings(lnUsedBase, lnUsedTool, 100, 500)
   LIN_REL {Z 100} C_VEL #BASE
   
   BAS (#INITMOV,0)
   PTP lAstartPos
END

DEFFCT FRAME getCircFrame(lrAngle :IN,lrRadius :IN,lnDevPart :IN,lnActPoint :IN ,lfStartPoint :IN)
   REAL lrAngle,lrRadius
   INT lnDevPart,lnActPoint
   FRAME lfStartPoint,lfPoint
   
   lfPoint = $NULLFRAME
   lfPoint.X = -(lrRadius * COS((lrAngle/lnDevPart*lnActPoint)))
   lfPoint.Y = -(lrRadius * SIN((lrAngle/lnDevPart*lnActPoint)))
   
   RETURN lfStartPoint:lfPoint
   
ENDFCT

DEF MillSquarePass(lrFrameLength :IN,lrInCut :IN, lrToolDiam: IN)
   
   DECL FRAME lfCorner[4]
   INT i
   REAL lrFrameLength, lrInCut, lrToolDiam
   REAL lrCurrentCut, lrAP,lrDepth , lrToolRad
   
   lrToolRad = lrToolDiam/2
   lrAP = 6.0
   lrCurrentCut = 0.0
   lrDepth = 2.0
   lrToolRad = lrToolDiam/2
   
   FOR i = 1 TO 4 STEP 1
      lfCorner[i] = $NULLFRAME
      lfCorner[i].Z = -lrDepth
   ENDFOR
   
   REPEAT 
      
      ;lfCorner[1](x,x)
      lfCorner[1].X = lrCurrentCut                  - lrToolRad
      lfCorner[1].Y = lrCurrentCut                  - lrToolRad
      
      ;lfCorner[2](320,x)
      lfCorner[2].X = lrFrameLength - lrCurrentCut  + lrToolRad
      lfCorner[2].Y = lrCurrentCut                  - lrToolRad
      
      ;lfCorner[3](320-x,320-x)
      lfCorner[3].X = lrFrameLength - lrCurrentCut  + lrToolRad
      lfCorner[3].Y = lrFrameLength -lrCurrentCut   + lrToolRad
      
      ;lfCorner[4](x,320)
      lfCorner[4].X = lrCurrentCut                  - lrToolRad
      lfCorner[4].Y = lrFrameLength - lrCurrentCut  + lrToolRad
      
      lrCurrentCut = lrCurrentCut+lrAP
      
      FOR i = 1 TO 4 STEP 1
       LIN  lfCorner[i] C_VEL
      ENDFOR
      LIN  lfCorner[1] C_VEL
      
      
      
   UNTIL lrCurrentCut >= lrInCut
   
END