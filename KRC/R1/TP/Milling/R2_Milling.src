&ACCESS RV1
&REL 3
&PARAM DISKPATH = KRC:\R1\TP\Milling
DEF R2_Milling ( )
;FOLD INIT
   ;******************************************************************
   ;* Safety Monitoring                                              *
   ;******************************************************************
   $CYCFLAG[cycEmStop]       = NOT $ALARM_STOP OR NOT gDiExtEmStop OR NOT gDiExtOpSafAckn 
   ;******************************************************************
   ;* Enable Switch monitoring                                       *
   ;******************************************************************
   IF $T1 AND NOT $USER_SAF THEN
      gbSpindleStart = FALSE
   ENDIF
   ;******************************************************************
   ;* gbRobControlActive = FALSE always when Prog not Runnin         *
   ;******************************************************************
   IF($PRO_STATE1==#P_RESET) OR ($PRO_STATE1==#P_FREE) THEN
      gbRobControlActive = FALSE
   ELSE
      gbRobControlActive = TRUE
      gnSetSpindleSpeedHmi = 0
   ENDIF
   
   ;******************************************************************
   ;* Act Spindle speed monitoring for HMI                           *
   ;******************************************************************
   gnActSpindleSpeed = getActSpindleSpeed(gDISpindleActSpeed)
   ;******************************************************************
   ;* Spindle Runing state monitoring for HMI                        *
   ;******************************************************************
   gbSpindleRunning  = ( gDISpindleActSpeed <> 0)
;ENDFOLD INIT  
;FOLD CLAMP
   ;******************************************************************
   ;* Call Clamp/Unclamp program Based on HMI                        *
   ;* After clamping gbClampHmiEnable will be  FALSE (Automaticaly)  *
   ;******************************************************************
   IF gbClampHmiEnable AND $T1 AND NOT gbRobControlActive THEN
      IF gbSpindleClamp THEN
         SpindleClamp(TRUE)
      ENDIF
      IF gbSpindleRelease THEN
         SpindleClamp(FALSE)
      ENDIF
      ENDIF
;ENDFOLD CLAMP
;FOLD SPINDLE CONTROL
   ;******************************************************************
   ;* Main Spindle Run function                                      *
   ;* Start / Stop / QuickStop                                       *
   ;* Speed                                                          *
   ;* SpindleWord (Acel,Decel,Wait)                                  *
   ;******************************************************************
   IF $CYCFLAG[cycEmStop]  THEN
      gDoQuickStop = TRUE
      oFreqconverterCtlw = gsSpindleWord.WaitForCommand
      oConverterSetSpeed = 0
      gISetSpeed = 0
      gbSpindleStart = FALSE
      IF( gDISpindleActSpeed == 0)THEN
         gDoSto1 = FALSE
         gDoSto2 = FALSE  
      ENDIF
   ELSE
      gDoSto1 = TRUE
      gDoSto2 = TRUE
      gDoQuickStop = FALSE
      oSpindleOperMode   = gnSpindleOperatinMode
      ;******************************************************************
      ;* Spindle Operated from Program                                  *
      ;******************************************************************
      IF gbSpindleStart AND NOT gbRobControlActive THEN  
         $TIMER_STOP[33] = TRUE
         $TIMER[33] = 0
         oConverterSetSpeed = getSpindleSpeed(gnSetSpindleSpeedHmi)
         oFreqconverterCtlw = gsSpindleWord.RunSpindle
         $TIMER_STOP[33] = FALSE
      ENDIF  
      ;******************************************************************
      ;* Spindle Operated from HMI                                      *
      ;******************************************************************
      IF gbSpindleStart AND gbRobControlActive THEN  
         $TIMER_STOP[33] = TRUE
         $TIMER[33] = 0
         oConverterSetSpeed = getSpindleSpeed(gISetSpeed)
         oFreqconverterCtlw = gsSpindleWord.RunSpindle
         $TIMER_STOP[33] = FALSE
      ENDIF
      ;******************************************************************
      ;* Stop Spindle                                                   *
      ;******************************************************************
      IF gbSpindleRunning AND NOT gbSpindleStart THEN
         oFreqconverterCtlw = gsSpindleWord.StopDec1
         $TIMER_STOP[33] = TRUE
         $TIMER[33] = 0
      ELSE
       ;******************************************************************
       ;*After Stop change controlWord to WAIT                           *
       ;******************************************************************
         IF  ($TIMER[33] > 500) THEN
            $TIMER_STOP[33] = TRUE
            $TIMER[33] = 0
            oFreqconverterCtlw = gsSpindleWord.WaitForCommand
         ENDIF
      ENDIF
   ENDIF
   ;ENDFOLD SPINDLE CONTROL
END

;FOLD getSpindleSpeed
DEFFCT INT getSpindleSpeed (lnSetSpindleSpeed :IN)
   INT lnSetSpindleSpeed
   
   IF lnSetSpindleSpeed<0 THEN
      RETURN (lnSetSpindleSpeed/10+65535)
   ELSE
      RETURN (lnSetSpindleSpeed/10)
   ENDIF
   
   RETURN 0
ENDFCT
;ENDFOLD getSpindleSpeed
;FOLD getActSpindleSpeed
DEFFCT INT getActSpindleSpeed (lnSpeedFeedback :IN)
   INT lnSpeedFeedback
   IF lnSpeedFeedback>30000 THEN
      gbSpindleDirCw = FALSE
      gbSpindleDirCcw = TRUE
      RETURN  ((65535 - lnSpeedFeedback)*10)
   ELSE
      IF (lnSpeedFeedback>0) AND  (lnSpeedFeedback<30000) THEN
         gbSpindleDirCw = TRUE
         gbSpindleDirCcw = FALSE
         RETURN (lnSpeedFeedback*10)
      ELSE
         gbSpindleDirCw = FALSE
         gbSpindleDirCcw = FALSE  
      ENDIF
   ENDIF
   RETURN 0
ENDFCT
;ENDFOLD getActSpindleSpeed
;FOLD SpindleRun
GLOBAL DEF SpindleRun (lbStartSpindle :IN,lrSpindleRPM :IN, FI_DIRECTION:IN)
   BOOL lbStartSpindle
   INT lrSpindleRPM
   DECL TYPMillDirection FI_DIRECTION
   IF lbStartSpindle THEN
      SWITCH FI_DIRECTION
         CASE #CLOCKWISE
            gISetSpeed = -lrSpindleRPM        
         CASE #COUNTERCLOCKWISE
            gISetSpeed = lrSpindleRPM
         DEFAULT
      ENDSWITCH
      gbSpindleStart = TRUE
   ELSE
      gbSpindleStart = FALSE  
   ENDIF
   
END
;ENDFOLD SpindleRun
;FOLD SpindleClamp
GLOBAL DEF SpindleClamp(lbTooleReleaseReq :IN)   
   BOOL lbTooleReleaseReq
   gDOChangeToolEnable = TRUE
   
   WAIT FOR gDISpindleActSpeed == 0
   
   IF (gDISpindleActSpeed == 0)THEN
      IF NOT lbTooleReleaseReq THEN     
         gDOToolClamp        = FALSE
         gDOToolRelease      = TRUE
      ELSE
         gDOToolClamp        = TRUE
         gDOToolRelease      = FALSE
         gbClampHmiEnable    = FALSE
      ENDIF
      WAIT SEC 1
      
   ENDIF
   
   gDOChangeToolEnable = FALSE
   gDOToolClamp        = FALSE
   gDOToolRelease      = FALSE
   
END
;ENDFOLD SpindleClamp